{
  "name": "primus-broadcast",
  "version": "1.1.0",
  "description": "Adds socket.io style broadcast functionality to primus.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fsbdev/primus-broadcast.git"
  },
  "keywords": [
    "primus",
    "socketio",
    "socket.io",
    "broadcast",
    "publish",
    "websocket",
    "realtime"
  ],
  "author": {
    "name": "Fabien Brooke"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/fsbdev/primus-broadcast/issues"
  },
  "homepage": "https://github.com/fsbdev/primus-broadcast",
  "readme": "## primus-broadcast\n\n`npm install primus-broadcast`\n\nA plugin for [primus](https://github.com/primus/primus) that adds a broadcast function to the socket/spark that excludes\nthe the instance you're broadcasting from, the same way it works in socket.io.\n\nIf you are using the [primus-emitter](https://github.com/cayasso/primus-emitter) plugin as well, this will favor the\n.send() function over the .write() function. (You will have to pass this plugin to primus after you pass the\nprimus-emitter one.)\n\n```javascript\nvar primusBroadcast = require('primus-broadcast');\n\nprimus.use('broadcast', primusBroadcast);\n\nspark.on('data', function message(data) {\n  // equivalent to socket.broadcast.emit() or socket.broadcast.send() in socket.io\n  spark.broadcast('Received some data');\n});\n```\n\nThe implementation is very simple (look for yourself) but nice to have as a module.\n\n### License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "_id": "primus-broadcast@1.1.0",
  "_from": "primus-broadcast@~1.1.0"
}
